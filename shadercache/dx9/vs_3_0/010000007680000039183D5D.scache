#define VERTEX_SHADER
#define MAP_SIZE_X 5632.000
#define MAP_SIZE_Y 2048.000
#define MAP_POW2_X 1.000
#define MAP_POW2_Y 1.000
#define FOW_POW2_X 1.000
#define FOW_POW2_Y 1.000
#define PDX_DIRECTX_9

#define mod( X, Y ) ( X % Y )

float fmod_loop( float x, float y )
{
  return x - y * floor( x / y );
}

#define GetMatrixData( Matrix, row, col ) ( Matrix [ row ] [ col ] )
#define FLIP_SCREEN_POS( X ) ( X )
#define FLIP_TEXTURE_V( vCoordinate ) ( vCoordinate )

#define sampler2DShadow sampler2D

float3x3 CastTo3x3( in float4x4 M )
{
	return (float3x3)M;
}
#define Create3x3 float3x3

float2 vec2(float vValue) { return float2(vValue, vValue); }
float3 vec3(float vValue) { return float3(vValue, vValue, vValue); }
float4 vec4(float vValue) { return float4(vValue, vValue, vValue, vValue); }

#define tex2Dlod0(samp,uv) tex2Dlod(samp, float4((uv), 0.0, 0.0))

#define PDX_POSITION POSITION

#define PDX_COLOR COLOR
float4x4 InverseView : register(c0);
float4 vColorHeight[40] : register(c4);
float4 vScreenPosWidthHeight : register(c44);
float2 vHalfLineWidthScale : register(c45);

struct VS_OUTPUT
{
	float4 vPosition : PDX_POSITION;
	float3 vColor : TEXCOORD0;
};
struct VS_INPUT
{
	float4 nOffset : POSITION;
};
VS_OUTPUT main(const VS_INPUT v )
		{
		    VS_OUTPUT Out;
			int4 nOffsetInt = int4(v.nOffset.x, v.nOffset.y, v.nOffset.z, v.nOffset.w);
		  	float  vHeight = vColorHeight[nOffsetInt.x].w;
			float  vOtherHeight = vColorHeight[ nOffsetInt.x + nOffsetInt.y ].w;
			
			float2 vLineVec = float2( vHalfLineWidthScale.y * float(nOffsetInt.y), vScreenPosWidthHeight.w * ( vHeight - vOtherHeight ) );
			vLineVec = normalize( vLineVec );
			vLineVec = float2( -vLineVec.y, vLineVec.x );
			
			float2 vCenterPoint = vScreenPosWidthHeight.xy; // screenpos of widget
			vCenterPoint.x += float(nOffsetInt.x) * vHalfLineWidthScale.y;
			vCenterPoint.y += vScreenPosWidthHeight.w * (1.0f - vHeight);
			
			vLineVec.xy  *= vHalfLineWidthScale.x * float(nOffsetInt.z);
			vCenterPoint += vLineVec;
			
			Out.vPosition = mul( float4( vCenterPoint, 0, 1 ), InverseView );
			Out.vColor = vColorHeight[ nOffsetInt.x ].xyz;
			return Out;
		}
	